import 'dart:io';
import 'package:flutter/services.dart' show rootBundle;
import 'package:ini/ini.dart';

class GrpcConfig {
  final String host;
  final int port;
  final bool tls;
  final String? pemPath;

  const GrpcConfig({
    required this.host,
    required this.port,
    this.tls = false,
    this.pemPath,
  });

  static Future<GrpcConfig> load() async {
    //  Manage if app is run under Windows or Linux
    final home =
        Platform.environment['HOME'] ??
        Platform.environment['USERPROFILE']; // Windows

    // Store config.ini according to different criterias (whatever the OS)
    final candidates = <String>[
      // from env variable ?
      Platform.environment['GRPC_CONFIG'] ?? '',
      // from /etc or generated by Yocto ?
      '/etc/flutter-ffi-grpc/config.ini',
      // or finally $HOME/.config
      if (home != null && home.isNotEmpty)
        '$home/.config/flutter-ffi-grpc/config.ini',
    ].where((p) => p.isNotEmpty).toList();

    for (final filename in candidates) {
      final fi = File(filename);
      if (await fi.exists()) {
        final cfg = Config.fromString(await fi.readAsString());
        return _fromIni(cfg);
      }
    }

    // Fallback: asset
    final s = await rootBundle.loadString('assets/config.ini');
    final cfg = Config.fromString(s);
    return _fromIni(cfg);
  }

  ///
  /// Parse ini file
  static GrpcConfig _fromIni(Config ini) {
    String getS(String k, [String d = '']) =>
        ini.get('grpc', k) ?? ini.get('', k) ?? d;
    final host = getS('host', '127.0.0.1');
    final port = int.tryParse(getS('port', '50051')) ?? 50051;
    final tlsRaw = getS('tls', 'false').toLowerCase().trim();
    final tls = tlsRaw == 'true' || tlsRaw == '1' || tlsRaw == 'yes';
    final pem = ini.get('grpc', 'pem_path') ?? ini.get('', 'pem_path');
    return GrpcConfig(host: host, port: port, tls: tls, pemPath: pem);
  }
}
